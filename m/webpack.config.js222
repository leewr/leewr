const dev = process.env.NODE_ENV !== 'production'
const path = require('path')
const webpack = require('webpack')
const { BundleAnalyzerPlugin } = require( "webpack-bundle-analyzer" )
const FriendlyErrorsWebpackPlugin = require( "friendly-errors-webpack-plugin" )
const WriteFileWebpackPlugin = require('write-file-webpack-plugin')
const nodeExternals = require('webpack-node-externals')
var ExtractTextPlugin = require('extract-text-webpack-plugin');
const aa = '1';

// if (!dev) {
//     plugins.push( new BundleAnalyzerPlugin( {
//         analyzerMode: "static",
//         reportFilename: "webpack-report.html",
//         openAnalyzer: false
//     } ) )
// }

module.exports = {
    mode: dev ? 'development': 'production',
    target: 'node',
    context: path.join( __dirname, "src" ),
    entry: {
        app: './client.js'
    },
    externals: [
        nodeExternals({
          // we still want imported css from external files to be bundled otherwise 3rd party packages
          // which require us to include their own css would not work properly
          // whitelist: /\.css$/
        })
      ],
    resolve: {
        modules: [
            path.resolve('./src'),
            "node_modules"
        ]
    },
    module: {
        rules:[
            {
                test: /\.jsx?$/,
                exclude: /(node_modules|bower_components)/,
                loader: "babel-loader"
            },
            {
                test: /\.scss$/,
                use: [
                    {
                    loader: "css-loader" // 将 CSS 转化成 CommonJS 模块
                    },
                    {
                    loader: "sass-loader" // 将 Sass 编译成 CSS
                    }
                ]
            },
            {
                test: /\.css$/,
                use: [
                  {
                    loader: `css-loader`
                  }
                ]
            },
        ]
    },
    output: {
        path: path.resolve(__dirname, "dist"),
        filename: "[name].bundle.js"
    },
    plugins: [

    ]
}